%% ASEN 3111 - Computational Assignment 3 - Main
%
%SUMMARY: 
%
% Author: Thomas Dunnington
% Collaborators: Nolan Stevenson, Owen Craig, Carson Kohlbrenner, Chase
% Rupprecht
% Date: 4/27/2023

%% Clean Up
close all; clear; clc;

%% Problem 1
%Recreate Fig 9.9
%Declare Mach number array
Mtemp = [1:0.1:2]';
MVec = [Mtemp; 2.2; 2.4; 2.6; 2.8; 3; 3.2; 3.4; 3.6; 3.8; 4; 4.5; 5; 6; 8; 10; 20];

%Declaring weak and strong matrices, each column is the deflection angle
thetaVals = linspace(0, 50, 1000)';
weakMat = zeros(length(thetaVals), length(MVec));
strongMat = zeros(length(thetaVals), length(MVec));

%Calling ObliqueShockBeta for various mach values and using the theta
%vector
for i = 1:length(MVec)
    for j = 1:length(thetaVals)
        weakMat(j,i) = ObliqueShockBeta(MVec(i),thetaVals(j),1.4,'Weak');
        strongMat(j,i) = ObliqueShockBeta(MVec(i),thetaVals(j),1.4,'Strong');
    end
end

%Defining blue intensity for the color
blueVal = linspace(0.5,1,length(MVec));
greenVal = linspace(1, 0, length(MVec));

%Plotting
figure();
set(0, 'defaulttextinterpreter', 'latex');

%Preliminary colors for legend later
plot(0,0,'color', [0; 1; 0.5]);
hold on
plot(0,0,'color', [0; 0.5; 1]);

%Checker to plot mach number on the plot
checker = 1;

%Plotting the rest of the mach numbers
for i = 1:length(MVec)
    %Flip checker to plot mach number on plot
    checker = ~checker;

    %Getting rid of imaginary and negative values
    weakLog = ~imag(weakMat(:,i)) & weakMat(:,i) >= 0;
    strongLog = ~imag(strongMat(:,i)) & strongMat(:,i) >= 0;
    
    %Defining the color 
    colorPlot = [0; greenVal(i); blueVal(i)];

    %Plotting weak and strong shocks for a given mach number
    plot([thetaVals(weakLog); flip(thetaVals(strongLog))], [weakMat(weakLog,i); flip(strongMat(strongLog,i))], 'color', colorPlot);

    %Adding number to the plot
    thetaEnd = thetaVals(weakLog);
    weakEnd = weakMat(weakLog,i);
    if(weakEnd)
        if(checker)
            text(thetaEnd(end), weakEnd(end), num2str(MVec(i)));
        end
    end
end

%Adding legend and labels
legend('Low Mach Number', 'High Mach Number', 'location', 'se')
xlabel('Deflection Angle $$(\theta^{\circ})$$')
ylabel('Shock Wave Angle $$(\delta^{\circ})$$')
title('Oblique Shock $$\theta - \beta - M$$ Relationship');


%% Problem 2
fprintf("--------Problem 2--------\n");

%Define parameters of the diamond airfoil
alpha = 10;
M = 3;
epsilon1 = 7.5;
epsilon2 = 5;

%Calling diamond airfoil to get 
[c_l,c_dw] = DiamondAirfoil(M, alpha, epsilon1, epsilon2);

if(c_l == 0xDEADBEEF && c_dw == 0xDEADBEEF) %Bow shock condition
    fprintf("The flow produces a bow shock.\n");
end

%Outputting to the terminal
fprintf("Coefficient of Lift and Wave Drag: \n")
fprintf("\t cl: %f \n", c_l);
fprintf("\t cdw: %f \n", c_dw);







